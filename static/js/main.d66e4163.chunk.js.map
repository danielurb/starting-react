{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PokemonRow","pokemon","onSelect","name","english","type","join","onClick","PokemonInfo","base","Object","keys","map","key","App","React","useState","filter","filterSet","selectedItem","selectedItemSet","style","margin","width","paddingTop","className","display","gridTemplateColumns","girdColumnGap","value","onChange","evt","target","pokenmon","toLowerCase","includes","slice","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAMMA,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OAClB,+BACC,6BAAKD,EAAQE,KAAKC,UAClB,6BAAKH,EAAQI,KAAKC,KAAK,QACvB,6BACC,wBAAQC,QAAS,kBAAML,EAASD,IAAhC,2BAeGO,EAAc,SAAC,GAAD,IAAGL,EAAH,EAAGA,KAAMM,EAAT,EAASA,KAAT,OACnB,gCACC,6BAAKN,EAAKC,UACV,gCACC,gCACEM,OAAOC,KAAKF,GAAMG,KAAI,SAAAC,GAAG,OACzB,+BACC,6BAAKA,IACL,6BAAKJ,EAAKI,OAFFA,cAwECC,MAhDf,WAAgB,IAAD,EACcC,IAAMC,SAAS,IAD7B,mBACPC,EADO,KACCC,EADD,OAE0BH,IAAMC,SAAS,MAFzC,mBAEPG,EAFO,KAEOC,EAFP,KAId,OACC,sBACCC,MAAO,CACNC,OAAQ,OACRC,MAAO,IACPC,WAAY,QAJd,UAMC,oBAAIC,UAAU,QAAd,4BACA,sBACCJ,MAAO,CACNK,QAAS,OACTC,oBAAqB,UACrBC,cAAe,QAJjB,UAMC,gCACC,uBAAOC,MAAOZ,EAAQa,SAAU,SAAAC,GAAG,OAAIb,EAAUa,EAAIC,OAAOH,UAC5D,wBAAON,MAAM,OAAb,UACC,gCACC,+BACC,sCACA,2CAGF,gCACEtB,EACCgB,QAAO,SAAAgB,GAAQ,OACfA,EAAS9B,KAAKC,QAAQ8B,cAAcC,SAASlB,EAAOiB,kBAEpDE,MAAM,EAAG,IACTxB,KAAI,SAAAX,GAAO,OACX,cAAC,EAAD,CACCA,QAASA,EAETC,SAAU,SAAAD,GAAO,OAAImB,EAAgBnB,KADhCA,EAAQoC,eAMlBlB,GAAgB,cAAC,EAAD,eAAiBA,WCtFvBmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d66e4163.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport './App.css';\nimport pokemon from './pokemon.json';\n\nconst PokemonRow = ({ pokemon, onSelect }) => (\n\t<tr>\n\t\t<td>{pokemon.name.english}</td>\n\t\t<td>{pokemon.type.join(', ')}</td>\n\t\t<td>\n\t\t\t<button onClick={() => onSelect(pokemon)}>Select!</button>\n\t\t</td>\n\t</tr>\n);\n\nPokemonRow.propTypes = {\n\tpokemon: PropTypes.shape({\n\t\tname: PropTypes.shape({\n\t\t\tenglish: PropTypes.string.isRequired\n\t\t}),\n\t\ttype: PropTypes.arrayOf(PropTypes.string.isRequired)\n\t}),\n\tonSelect: PropTypes.func.isRequired\n};\n\nconst PokemonInfo = ({ name, base }) => (\n\t<div>\n\t\t<h1>{name.english}</h1>\n\t\t<table>\n\t\t\t<tbody>\n\t\t\t\t{Object.keys(base).map(key => (\n\t\t\t\t\t<tr key={key}>\n\t\t\t\t\t\t<td>{key}</td>\n\t\t\t\t\t\t<td>{base[key]}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n);\n\nPokemonInfo.propTypes = {\n\tname: PropTypes.shape({\n\t\tenglish: PropTypes.string.isRequired\n\t}),\n\tbase: PropTypes.shape({\n\t\tHP: PropTypes.number.isRequired,\n\t\tAttack: PropTypes.number.isRequired,\n\t\tDefense: PropTypes.number.isRequired,\n\t\t'Sp. Attack': PropTypes.number.isRequired,\n\t\t'Sp. Defense': PropTypes.number.isRequired,\n\t\tSpeed: PropTypes.number.isRequired\n\t})\n};\n\nfunction App() {\n\tconst [filter, filterSet] = React.useState('');\n\tconst [selectedItem, selectedItemSet] = React.useState(null);\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\tmargin: 'auto',\n\t\t\t\twidth: 800,\n\t\t\t\tpaddingTop: '1rem'\n\t\t\t}}>\n\t\t\t<h1 className='title'>Pokemon Search</h1>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: 'grid',\n\t\t\t\t\tgridTemplateColumns: '70% 30%',\n\t\t\t\t\tgirdColumnGap: '1rem'\n\t\t\t\t}}>\n\t\t\t\t<div>\n\t\t\t\t\t<input value={filter} onChange={evt => filterSet(evt.target.value)} />\n\t\t\t\t\t<table width='100%'>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>Name</th>\n\t\t\t\t\t\t\t\t<th>Type</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{pokemon\n\t\t\t\t\t\t\t\t.filter(pokenmon =>\n\t\t\t\t\t\t\t\t\tpokenmon.name.english.toLowerCase().includes(filter.toLowerCase())\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.slice(0, 20)\n\t\t\t\t\t\t\t\t.map(pokemon => (\n\t\t\t\t\t\t\t\t\t<PokemonRow\n\t\t\t\t\t\t\t\t\t\tpokemon={pokemon}\n\t\t\t\t\t\t\t\t\t\tkey={pokemon.id}\n\t\t\t\t\t\t\t\t\t\tonSelect={pokemon => selectedItemSet(pokemon)}></PokemonRow>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t{selectedItem && <PokemonInfo {...selectedItem} />}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}