{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PokemonRow","pokemon","onSelect","name","english","type","join","onClick","PokemonInfo","base","Object","keys","map","key","Title","styled","h1","TwoColumnLayout","div","Container","Input","input","App","React","useState","filter","filterSet","pokemonSet","selectedItem","selectedItemSet","useEffect","fetch","then","resp","json","data","value","onChange","evt","target","width","pokenmon","toLowerCase","includes","slice","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAMMA,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OAClB,+BACC,6BAAKD,EAAQE,KAAKC,UAClB,6BAAKH,EAAQI,KAAKC,KAAK,QACvB,6BACC,wBAAQC,QAAS,kBAAML,EAASD,IAAhC,2BAeGO,EAAc,SAAC,GAAD,IAAGL,EAAH,EAAGA,KAAMM,EAAT,EAASA,KAAT,OACnB,gCACC,6BAAKN,EAAKC,UACV,gCACC,gCACEM,OAAOC,KAAKF,GAAMG,KAAI,SAAAC,GAAG,OACzB,+BACC,6BAAKA,IACL,6BAAKJ,EAAKI,OAFFA,cAwBRC,EAAQC,IAAOC,GAAV,mDAGLC,EAAkBF,IAAOG,IAAV,2GAKfC,EAAYJ,IAAOG,IAAV,kFAKTE,EAAQL,IAAOM,MAAV,uFAwDIC,MAlDf,WAAgB,IAAD,EACcC,IAAMC,SAAS,IAD7B,mBACPC,EADO,KACCC,EADD,OAEgBH,IAAMC,SAAS,IAF/B,mBAEPvB,EAFO,KAEE0B,EAFF,OAG0BJ,IAAMC,SAAS,MAHzC,mBAGPI,EAHO,KAGOC,EAHP,KAgBd,OAXAN,IAAMO,WAAU,WAMfC,MAAM,GAAD,OAFD,GAEC,iCACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAI,OAAIR,EAAWQ,QACxB,IAGF,eAAChB,EAAD,WACC,cAACL,EAAD,6BACA,eAACG,EAAD,WACC,gCACC,cAACG,EAAD,CAAOgB,MAAOX,EAAQY,SAAU,SAAAC,GAAG,OAAIZ,EAAUY,EAAIC,OAAOH,UAC5D,wBAAOI,MAAM,OAAb,UACC,gCACC,+BACC,sCACA,2CAGF,gCACEvC,EACCwB,QAAO,SAAAgB,GAAQ,OACfA,EAAStC,KAAKC,QAAQsC,cAAcC,SAASlB,EAAOiB,kBAEpDE,MAAM,EAAG,IACThC,KAAI,SAAAX,GAAO,OACX,cAAC,EAAD,CACCA,QAASA,EAETC,SAAU,SAAAD,GAAO,OAAI4B,EAAgB5B,KADhCA,EAAQ4C,eAMlBjB,GAAgB,cAAC,EAAD,eAAiBA,WC3GvBkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5a4321c5.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport './App.css';\n\nconst PokemonRow = ({ pokemon, onSelect }) => (\n\t<tr>\n\t\t<td>{pokemon.name.english}</td>\n\t\t<td>{pokemon.type.join(', ')}</td>\n\t\t<td>\n\t\t\t<button onClick={() => onSelect(pokemon)}>Select!</button>\n\t\t</td>\n\t</tr>\n);\n\nPokemonRow.propTypes = {\n\tpokemon: PropTypes.shape({\n\t\tname: PropTypes.shape({\n\t\t\tenglish: PropTypes.string.isRequired\n\t\t}),\n\t\ttype: PropTypes.arrayOf(PropTypes.string.isRequired)\n\t}),\n\tonSelect: PropTypes.func.isRequired\n};\n\nconst PokemonInfo = ({ name, base }) => (\n\t<div>\n\t\t<h1>{name.english}</h1>\n\t\t<table>\n\t\t\t<tbody>\n\t\t\t\t{Object.keys(base).map(key => (\n\t\t\t\t\t<tr key={key}>\n\t\t\t\t\t\t<td>{key}</td>\n\t\t\t\t\t\t<td>{base[key]}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n);\n\nPokemonInfo.propTypes = {\n\tname: PropTypes.shape({\n\t\tenglish: PropTypes.string.isRequired\n\t}),\n\tbase: PropTypes.shape({\n\t\tHP: PropTypes.number.isRequired,\n\t\tAttack: PropTypes.number.isRequired,\n\t\tDefense: PropTypes.number.isRequired,\n\t\t'Sp. Attack': PropTypes.number.isRequired,\n\t\t'Sp. Defense': PropTypes.number.isRequired,\n\t\tSpeed: PropTypes.number.isRequired\n\t})\n};\n\nconst Title = styled.h1`\n\ttext-align: center;\n`;\nconst TwoColumnLayout = styled.div`\n\tdisplay: grid;\n\tgrid-template-columns: 70% 30%;\n\tgrid-column-gap: 1rem;\n`;\nconst Container = styled.div`\n\tmargin: auto;\n\twidth: 800;\n\tpadding-top: 1rem;\n`;\nconst Input = styled.input`\n\twidth: 100%;\n\tfont-size: x-large;\n\tpadding: 0.2rem;\n`;\n\nfunction App() {\n\tconst [filter, filterSet] = React.useState('');\n\tconst [pokemon, pokemonSet] = React.useState([]);\n\tconst [selectedItem, selectedItemSet] = React.useState(null);\n\n\tReact.useEffect(() => {\n\t\tlet host =\n\t\t\t!process.env.NODE_ENV || process.env.NODE_ENV === 'development'\n\t\t\t\t? 'http://localhost:3000'\n\t\t\t\t: '';\n\n\t\tfetch(`${host}/starting-react/pokemon.json`)\n\t\t\t.then(resp => resp.json())\n\t\t\t.then(data => pokemonSet(data));\n\t}, []);\n\n\treturn (\n\t\t<Container>\n\t\t\t<Title>Pokemon Search</Title>\n\t\t\t<TwoColumnLayout>\n\t\t\t\t<div>\n\t\t\t\t\t<Input value={filter} onChange={evt => filterSet(evt.target.value)} />\n\t\t\t\t\t<table width='100%'>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>Name</th>\n\t\t\t\t\t\t\t\t<th>Type</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{pokemon\n\t\t\t\t\t\t\t\t.filter(pokenmon =>\n\t\t\t\t\t\t\t\t\tpokenmon.name.english.toLowerCase().includes(filter.toLowerCase())\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.slice(0, 20)\n\t\t\t\t\t\t\t\t.map(pokemon => (\n\t\t\t\t\t\t\t\t\t<PokemonRow\n\t\t\t\t\t\t\t\t\t\tpokemon={pokemon}\n\t\t\t\t\t\t\t\t\t\tkey={pokemon.id}\n\t\t\t\t\t\t\t\t\t\tonSelect={pokemon => selectedItemSet(pokemon)}></PokemonRow>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t{selectedItem && <PokemonInfo {...selectedItem} />}\n\t\t\t</TwoColumnLayout>\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}